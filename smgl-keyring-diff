#!/bin/bash

function show_usage() {
  exit_code=${1:-1}
  usage="$(basename $0) shows changes to the gpg keyring in git repository

To show the last change to the gurus.gpg run:
$(basename $0) gurus.gpg

To show change No. 1 run:
$(basename $0) gurus.gpg 1

It also works with negative numbers. For example
to show preprevious change run:
$(basename $0) gurus.gpg -2"
  echo -e "$usage"
  exit $exit_code
}

if [ -z $1 ] || [[ $1 =~ (--help|-h) ]]; then
  show_usage
fi

if ! file -bi "$1" |  grep -iq gnupg-keyring ; then
  echo "File $1 is not valid gpg keyring!"
  show_usage 3
fi

if [[ $(git rev-parse --is-inside-work-tree) != "true" ]]; then
  echo "You must be inside git repository"
  show_usage 5
fi


working_branch=$(git branch |grep \* |cut -d" " -f2)
# lets do all the git work in a branch
git checkout -q -b $(basename $0)-temp

C=$(git log $1 | grep ^commit | wc -l)

echo
echo The $1 keyring has been changed $C times.

if [ -z $2 ]; then
	B=1
elif [ $2 -lt 0 ];then
	B=$((0-$2))
else
	B=$(($C-$2+1))
fi

A=$(($B+1))

BH=$(git log $1 | grep ^commit | head -n $B | tail -n 1 | cut -f2 -d " ")
AH=$(git log $1 | grep ^commit | head -n $A | tail -n 1 | cut -f2 -d " ")

# B
git reset -q --hard $BH
BS=$(ls -l $1 | cut -f 5 -d " ")
gpg $1 > /tmp/$$-B 2> /dev/null

# A
git reset -q --hard $AH
AS=$(ls -l $1 | cut -f 5 -d " ")
gpg $1 > /tmp/$$-A 2> /dev/null

C=$(($C-$B+1))
echo The $C. change is
echo $BH
echo
if [ $BH == $AH ]; then
	echo size: 0 "->" $BS
	echo
	cat /tmp/$$-A
else
	echo size: $AS "->" $BS
	echo
	diff /tmp/$$-A /tmp/$$-B | grep -e \> -e \<
fi
echo

# now lets return to branch we were before
git checkout -q $working_branch

# we don't need that branch anymore (discard it quietly)
git branch -D $(basename $0)-temp > /dev/null 2>&1

rm /tmp/$$-B /tmp/$$-A
